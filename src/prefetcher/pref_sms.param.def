
/* Copyright 2023 Esteban Ramos and Mohammadamin Karbasforushan
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/***************************************************************************************
 * File         : pref_sms.param.def
 * Authors      : Amin Karbas and Esteban Ramos
 * Date         : 06/04/2023
 * Description  : Impl of Somogyi et al.'s "Spatial Memory Streaming", ISCA'06
 ***************************************************************************************/

/* -*- Mode: c -*- */

/* These ".param.def" files contain the various parameters that can be given to
   the simulator.  NOTE: Don't screw around with the order of these macro fields
   without fixing the etags regexps.

   DEF_PARAM(  Option, Variable Name, Type, Function, Default Value, Const)

   Option -- The name of the parameter when given on the command line (eg.
   "--param_0"). All parameters take an argument.  Thus, "--param_0=3" would be
   a valid specification.

   Variable Name -- The name of the variable that will be created in
   'parameters.c' and externed in 'parameters.h'.

   Type -- The type of the variable that will be created in 'parameters.c' and
   externed in 'parameters.h'.

   Function -- The name of the function declared in 'parameters.c' that will
   parse the text after the '='.

   Default Value -- The default value that the variable created will have.  This
   must be the same type as the 'Type' field indicates (or be able to be cast to
   it).

   Const -- Put the word "const" here if you want this parameter to be constant.
   An error messsage will be printed if the user tries to set it with a command
   line option.
*/

DEF_PARAM(pref_sms_on, PREF_SMS_ON, Flag, Flag, FALSE, )
DEF_PARAM(pref_sms_at_size, PREF_SMS_AT_SIZE, uns, uns, 64, )
DEF_PARAM(pref_sms_ft_size, PREF_SMS_FT_SIZE, uns, uns, 64, )
DEF_PARAM(pref_sms_pht_size, PREF_SMS_PHT_SIZE, uns, uns, 16384, )
